name: Build Ubuntu autoinstall ISO files

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "draft" ]
    paths:
      - ubuntu_autoinstall_iso
  pull_request:
    branches: [ "main" ]
    paths:
      - ubuntu_autoinstall_iso

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: install build dependencies
        shell: bash
        run: sudo apt install -y p7zip-full wget xorriso

      - name: read ubuntu codename
        shell: bash
        run: echo "UBUNTU_CODENAME=$(cat ubuntu_autoinstall_iso/ubuntu_codename)" >> $GITHUB_ENV

      - name: build prerequsites
        shell: bash
        run: |
          mkdir ${{ env.UBUNTU_CODENAME }}-autoinstall-iso
          cd ${{ env.UBUNTU_CODENAME }}-autoinstall-iso
          wget https://cdimage.ubuntu.com/ubuntu-server/${{ env.UBUNTU_CODENAME }}/daily-live/current/${{ env.UBUNTU_CODENAME }}-live-server-amd64.iso
          7z -y x jammy-live-server-amd64.iso -osource-files
          mv source-files/\[BOOT\]/ ./BOOT

      - name: edit grub.cfg
        shell: bash
        run: |
          cd ${{ env.UBUNTU_CODENAME }}-autoinstall-iso
          cat << EOF > grub_add.txt

          menuentry "Autoinstall Ubuntu Server" {
              set gfxpayload=keep
              linux   /casper/vmlinuz quiet autoinstall ---
              initrd  /casper/initrd
          }
          EOF
          sed -i '/menu_color_highlight/r grub_add.txt' source-files/boot/grub/grub.cfg
          sed -i 's/timeout=30/timeout=1/g' source-files/boot/grub/grub.cfg

      - name: generate new ISO file
        shell: bash
        run: |
          cd ${{ env.UBUNTU_CODENAME }}-autoinstall-iso/source-files
          xorriso -as mkisofs -r \
          -V 'Ubuntu-Server 22.04.3 LTS amd64' \
          -o ../ubuntu-${{ env.UBUNTU_CODENAME }}-autoinstall.iso \
          --modification-date='2023112609223200' \
          --grub2-mbr '../BOOT/1-Boot-NoEmul.img' \
          --protective-msdos-label \
          -partition_cyl_align off \
          -partition_offset 16 \
          --mbr-force-bootable \
          -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b '../BOOT/2-Boot-NoEmul.img' \
          -appended_part_as_gpt \
          -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \
          -c '/boot.catalog' \
          -b '/boot/grub/i386-pc/eltorito.img' \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          --grub2-boot-info \
          -eltorito-alt-boot \
          -e '--interval:appended_partition_2_start_1013254s_size_10068d:all::' \
          -no-emul-boot \
          -boot-load-size 10068 \
          .

      - name: generate release tag
        id: tag
        shell: bash
        run: |
          echo "release_tag=Ubuntu-${{ env.UBUNTU_CODENAME }}-AutoinstallIsoBuild_$(date +"%Y.%m.%d_%H-%M")" >> $GITHUB_OUTPUT

      - name: git config
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: tag the commit
        shell: bash
        run: |
          git tag -a "${{ steps.tag.outputs.release_tag }}" -m "Version ${{ steps.tag.outputs.release_tag }}"
          git push --follow-tags

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ./${{ env.UBUNTU_CODENAME }}-autoinstall-iso/ubuntu-${{ env.UBUNTU_CODENAME }}-autoinstall.iso
